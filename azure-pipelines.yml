#name: $(BuildID)
trigger: none

variables:
  versionprefix: 0.4.0
  buildConfiguration: 'Release'
  libname: 'libfacedetection'

jobs:
  - job: 'BuildLib'  
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-18.04'
          rid: 'linux-x64'
        mac:
          imageName: 'macos-10.14'
          rid: 'osx-x64'
        win-x64:
          rid: 'win-x64'
          imageName: 'windows-2019'
        win-x86:
          rid: 'win-x86'
          imageName: 'windows-2019'

    pool:
      vmImage: $(imageName)

    steps:
      - task: CMake@1      
        condition: eq(variables.rid, 'win-x86')
        displayName: 'CMake configure x86'
        inputs:
          workingDirectory: 'src'
          cmakeArgs: '-A Win32 -DCMAKE_BUILD_TYPE="RelWithDebInfo" .'
      - task: CMake@1
        condition: ne(variables.rid, 'win-x86')
        displayName: 'CMake configure x64'
        inputs:
          workingDirectory: 'src'
          cmakeArgs: '-DCMAKE_BUILD_TYPE="RelWithDebInfo" .'
      - task: VSBuild@1
        displayName: 'Build Windows native x86 asset'
        condition: eq(variables.rid, 'win-x86')
        inputs:
          solution: 'src/libfacedetection.sln'
          platform: 'Win32'
          configuration: '$(buildConfiguration)'
      - task: VSBuild@1
        displayName: 'Build Windows native x64 asset'
        condition: eq(variables.rid, 'win-x64')
        inputs:
          solution: 'src/libfacedetection.sln'
          platform: 'x64'
          configuration: '$(buildConfiguration)'
      
      - task: CMake@1
        displayName: 'Build Linux native x64 asset'
        condition: or(eq(variables.rid, 'linux-x64'), eq(variables.rid, 'osx-x64'))
        inputs:
          workingDirectory: 'src'
          cmakeArgs: '--build .'
      - task: CopyFiles@2
        displayName: 'Copy native binary'
        inputs:
          Contents: |
            **\$(libname).dll
            **/$(libname).so
            **/$(libname).dylib
          TargetFolder: 'artifacts/native'
          CleanTargetFolder: true
          FlattenFolders: true
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: 'artifacts'
          ArtifactName: '$(rid)'
          publishLocation: 'Container'

  - job: 'TestLib'
    dependsOn: 'BuildLib'
    strategy:
      matrix:
        linux-x64:
          imageName: 'ubuntu-18.04'
          rid: 'linux-x64'
        mac:
          imageName: 'macos-10.14'
          rid: 'osx-x64'
        win-x64:
          rid: 'win-x64'
          imageName: 'windows-2019'
        win-x86:
          rid: 'win-x86'
          imageName: 'windows-2019'

    pool:
      vmImage: $(imageName)

    steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Download $(rid) artifact'
        inputs:
          downloadType: 'specific'
          downloadPath: 'runtimes'
          artifactName: $(rid)
      - task: CopyFiles@2
        displayName: 'Copy native binary to src/native'
        inputs:
          Contents: 'runtimes/**/*'
          TargetFolder: src/native
      - task: UseDotNet@2
        displayName: 'Use .NET Core 3.1.x'
        inputs:
          packageType: 'sdk'
          version: '3.1.x'
      - task: CmdLine@2
        displayName: 'Setup dependencies'
        condition: eq(variables.rid, 'osx-x64')
        inputs:
          script: 'brew install mono-libgdiplus'
      - task: DotNetCoreCLI@2
        displayName: 'Build libfacedetection.net'
        inputs:
          command: 'build'
          projects: 'libfacedetection.net.sln'
          arguments: '/p:NativeOutputDir=..\native\runtimes\$(rid)\native\ --configuration $(buildConfiguration) --runtime $(rid)'
      - task: DotNetCoreCLI@2
        displayName: 'Test libfacedetection.net'
        inputs:
          command: 'test'
          projects: 'libfacedetection.net.sln'
          arguments: '--configuration $(buildConfiguration) --runtime $(rid) --no-build'

  - job: 'BuildPackage'
    dependsOn: 'TestLib'
    steps:
    - task: DownloadBuildArtifacts@0
      displayName: 'Download win-x64 artifact'
      inputs:
        downloadType: 'specific'
        downloadPath: 'runtimes'
        artifactName: 'win-x64'
    - task: DownloadBuildArtifacts@0
      displayName: 'Download win-x86 artifact'
      inputs:
        downloadType: 'specific'
        downloadPath: 'runtimes'
        artifactName: 'win-x86'
    - task: DownloadBuildArtifacts@0
      displayName: 'Download linux-x64 artifact'
      inputs:
        downloadType: 'specific'
        downloadPath: 'runtimes'
        artifactName: 'linux-x64'
    - task: DownloadBuildArtifacts@0
      displayName: 'Download osx-x64 artifact'
      inputs:
        downloadType: 'specific'
        downloadPath: 'runtimes'
        artifactName: 'osx-x64'
    - task: CopyFiles@2
      displayName: 'Copy native binary to src/native'
      inputs:
        Contents: 'runtimes/**/*'
        TargetFolder: src/native
    - task: UseDotNet@2
      displayName: 'Use .NET Core 3.1.x'
      inputs:
        packageType: 'sdk'
        version: '3.1.x'
    - task: CmdLine@2
      displayName: 'Package libfacedetection.net'
      inputs:
        script: 'dotnet pack -c $(buildConfiguration) /p:VersionPrefix=$(versionprefix) -o $(Build.ArtifactStagingDirectory) -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'
        workingDirectory: 'src/libfacedetection.net'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'package'
        publishLocation: 'Container'

  - job: 'PublishToNuGet'
    dependsOn: 'BuildPackage'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        downloadPath: 'artifacts'
        artifactName: 'package'
    # - task: NuGetCommand@2
    #   displayName: 'Publish to nuget.org'
    #   inputs:
    #     command: push
    #     packagesToPush: 'artifacts/package/*.nupkg;!artifacts/package/*.symbols.nupkg'
    #     nuGetFeedType: external
    #     publishFeedCredentials: 'NuGet'